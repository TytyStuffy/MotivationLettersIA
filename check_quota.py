#!/usr/bin/env python3
"""
Outil pour v√©rifier l'√©tat des quotas API et g√©n√©rer un rapport.
"""
import sys
import json
from datetime import datetime, timedelta
from quota_manager import quota_manager

def display_report():
    """Affiche un rapport d√©taill√© sur l'utilisation de l'API"""
    try:
        report = quota_manager.get_usage_report()
        
        print("\n===== RAPPORT D'UTILISATION DE L'API GEMINI =====\n")
        
        print(f"Requ√™tes totales effectu√©es: {report['total_requests']}")
        print(f"Erreurs de quota rencontr√©es: {report['total_quota_errors']}")
        
        # Afficher les d√©tails quotidiens
        print("\nUtilisation r√©cente:")
        print(f"- Aujourd'hui: {report['today']['requests']} requ√™tes, {report['today']['errors']} erreurs")
        print(f"- Hier: {report['yesterday']['requests']} requ√™tes, {report['yesterday']['errors']} erreurs")
        
        # Afficher les informations sur la derni√®re erreur
        if report['last_error']:
            try:
                error_time = datetime.fromisoformat(report['last_error'])
                now = datetime.now()
                hours_since = (now - error_time).total_seconds() / 3600
                
                print("\nDerni√®re erreur de quota:")
                print(f"- Date: {error_time.strftime('%d/%m/%Y %H:%M:%S')}")
                print(f"- Il y a: {hours_since:.1f} heures")
                
                if hours_since < 24:
                    print("\n‚ö†Ô∏è ATTENTION: Des erreurs de quota r√©centes peuvent indiquer que vous avez")
                    print("atteint votre limite d'utilisation. Google applique g√©n√©ralement des")
                    print("limites sur des p√©riodes de 24 heures ou 60 secondes.")
                    
                    if hours_since < 1:
                        print("\nüõë RECOMMANDATION: Attendez au moins une heure avant de faire")
                        print("de nouvelles requ√™tes pour √©viter des d√©lais suppl√©mentaires.")
                    else:
                        print("\n‚ö†Ô∏è RECOMMANDATION: Limitez le nombre de requ√™tes dans les prochaines heures.")
                else:
                    print("\n‚úÖ Bon √† savoir: Votre derni√®re erreur de quota remonte √† plus de 24 heures.")
                    print("Vous ne devriez pas rencontrer de probl√®mes imm√©diats de limitation.")
            except Exception as e:
                print(f"\nErreur lors de l'analyse de la date de derni√®re erreur: {e}")
        else:
            print("\n‚úÖ Aucune erreur de quota n'a √©t√© enregistr√©e jusqu'√† pr√©sent.")
        
        print("\n===== CONSEILS D'UTILISATION =====")
        print("- Les quotas Google Gemini sont g√©n√©ralement bas√©s sur des p√©riodes de 24h et 60s")
        print("- Pour √©viter les erreurs, espacez vos g√©n√©rations de plusieurs minutes")
        print("- Si vous rencontrez des erreurs, attendez quelques heures avant de r√©essayer")
        print("- Consid√©rez une mise √† niveau vers un plan payant pour plus de requ√™tes\n")
        
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration du rapport: {e}")
        return 1
    
    return 0

def reset_stats():
    """R√©initialise les statistiques d'utilisation"""
    try:
        confirm = input("√ätes-vous s√ªr de vouloir r√©initialiser toutes les statistiques d'utilisation? (oui/non): ")
        if confirm.lower() != "oui":
            print("Op√©ration annul√©e.")
            return 0
            
        # R√©initialiser les statistiques
        quota_manager.usage_stats = {
            "total_requests": 0,
            "quota_errors": 0,
            "last_error_time": None,
            "daily_usage": {},
            "hourly_limits": {}
        }
        quota_manager._save_usage_stats()
        print("Les statistiques d'utilisation ont √©t√© r√©initialis√©es avec succ√®s.")
        return 0
    except Exception as e:
        print(f"Erreur lors de la r√©initialisation des statistiques: {e}")
        return 1

def main():
    """Fonction principale"""
    # Analyser les arguments
    if len(sys.argv) > 1 and sys.argv[1] == "--reset":
        return reset_stats()
    else:
        return display_report()

if __name__ == "__main__":
    sys.exit(main())
